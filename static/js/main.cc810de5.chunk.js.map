{"version":3,"sources":["CharacterCard.js","Wrapper.js","Navbar.js","Jumbotron.js","App.js","index.js"],"names":["CharacterCard","props","className","Clicked","onClick","handleClick","id","alt","name","src","image","Wrapper","children","Navbar","currentScore","highScore","Jumbotron","App","useState","data","characters","setCharacters","setHighScore","setCurrentScore","clicked","setClicked","shuffleArray","handleScore","forEach","element","handleIncrement","console","log","shuffledArr","shuffle","array","j","i","length","Math","floor","random","t","style","backgroundImage","map","character","occupation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAuBeA,MArBf,SAAuBC,GACrB,OACE,sBACEC,UAAW,SAAWD,EAAME,QAAU,UAAY,IAClDC,QAAS,kBAAMH,EAAMI,YAAYJ,EAAMK,KAFzC,UAIE,qBAAKJ,UAAU,gBAAf,SACE,qBAAKK,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,UAEnC,qBAAKR,UAAU,cAAf,SACE,6BACE,+BACE,4CACCD,EAAMO,gBCTJG,MAJf,SAAiBV,GACf,OAAO,qBAAKC,UAAU,UAAf,SAA0BD,EAAMW,YCkB1BC,MAnBf,YAAwD,IAAtCC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,UAAWH,EAAY,EAAZA,SACzC,OACE,wBAAQV,UAAU,4BAAlB,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,WAAd,yCACA,sBAAKA,UAAU,WAAf,UACE,wCACS,+BAAOY,OAEhB,4CACa,+BAAOC,OAEnBH,WCEII,MAdf,SAAmBf,GACjB,OACE,qBAAKC,UAAU,4BAAf,SACE,sBAAKA,UAAU,YAAf,UACGD,EAAMW,SACP,mBAAGV,UAAU,OAAb,4F,eCmHOe,EAlHH,WACV,MAAoCC,mBAASC,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCH,mBAAS,GAA3C,mBAAOH,EAAP,KAAkBO,EAAlB,KACA,EAAwCJ,mBAAS,GAAjD,mBAAOJ,EAAP,KAAqBS,EAArB,KACA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KAqBMpB,EAAc,SAACC,GAEnBoB,IACAC,EAAYrB,IAIRqB,EAAc,SAACrB,GACnBc,EAAWQ,SAAQ,SAACC,GACdvB,IAAOuB,EAAQvB,KAA0B,IAApBuB,EAAQL,SAC/BK,EAAQL,SAAU,EAClBC,GAAW,GACXK,IACAC,QAAQC,IAAIZ,IACHd,IAAOuB,EAAQvB,KAA0B,IAApBuB,EAAQL,UAClCV,EAAeC,GACjBO,EAAaR,GAGfS,EAAgB,GAChBE,GAAW,GACXL,EAAWQ,SAAQ,SAACC,GAAD,OAAcA,EAAQL,SAAU,KACnDO,QAAQC,IAAIZ,QAKZM,EAAe,WAEnB,IAAMO,EAAcC,EAAQd,GAE5BC,EAAcY,IAIVH,EAAkB,WAEtBP,EAAgBT,EAAe,IAI3BoB,EAAU,SAACC,GAaf,IAAK,IAAIC,EAAGC,EAAIF,EAAMG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5CD,EAAIG,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpC,IAAMK,EAAIP,EAAME,GAChBF,EAAME,GAAKF,EAAMC,GACjBD,EAAMC,GAAKM,EAIb,OAAOP,GAGT,OACE,eAAC,EAAD,CACEQ,MAAO,CACLC,gBAAgB,oEAFpB,UAKE,cAAC,EAAD,CAAQ9B,aAAcA,EAAcC,UAAWA,IAC/C,cAAC,EAAD,IAECK,EAAWyB,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,CACE3C,QAASqB,EACTnB,YAAaA,EACbC,GAAIwC,EAAUxC,GAEdE,KAAMsC,EAAUtC,KAChBE,MAAOoC,EAAUpC,MACjBqC,WAAYD,EAAUC,YAHjBD,EAAUxC,WC5GzB0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.cc810de5.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction CharacterCard(props) {\n  return (\n    <div\n      className={\"card \" + (props.Clicked ? \"animate\" : \"\")}\n      onClick={() => props.handleClick(props.id)}\n    >\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"img-content\">\n        <ul>\n          <li>\n            <strong>Name: </strong>\n            {props.name}\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default CharacterCard;\n","import React from \"react\"\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper\n","import React from \"react\"\n\nfunction Navbar({ currentScore, highScore, children }) {\n  return (\n    <header className=\"container-fluid fixed-top\">\n      <div className=\"row\">\n        <h1 className=\"col-sm-8\">Dragon Ball Z - Memory Game</h1>\n        <nav className=\"col-sm-4\">\n          <p>\n            Score: <span>{currentScore}</span>\n          </p>\n          <p>\n            Top Score: <span>{highScore}</span>\n          </p>\n          {children}\n        </nav>\n      </div>\n    </header>\n  )\n}\n\nexport default Navbar\n","import React from \"react\"\n\nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        {props.children}\n        <p className=\"lead\">\n          Get points by clicking on an image but dont click on any more than\n          once!\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default Jumbotron\n","import React, { useState } from \"react\"\nimport CharacterCard from \"./CharacterCard\"\nimport Wrapper from \"./Wrapper\"\nimport Navbar from \"./Navbar\"\nimport Jumbotron from \"./Jumbotron\"\nimport \"./App.css\"\nimport data from \"./characters.json\"\n\nconst App = () => {\n  const [characters, setCharacters] = useState(data)\n  const [highScore, setHighScore] = useState(0)\n  const [currentScore, setCurrentScore] = useState(0)\n  const [clicked, setClicked] = useState(false)\n\n  // useEffect(() => {\n  //   fetch(\"/characters.json\")\n  //     .then((response) => response.json())\n  //     .then((data) => {\n  //       setCharacters(data)\n  //     })\n  // }, [])\n\n  // useEffect(() => {\n  //   const fetchJSON = async () => {\n  //     const response = await fetch(\"/characters.json\")\n  //     console.log(response)\n  //     const data = await response.json()\n  //     setCharacters(data)\n  //   }\n\n  //   fetchJSON()\n  // }, [])\n\n  const handleClick = (id) => {\n    // manejador del click.\n    shuffleArray() //\n    handleScore(id)\n    /*  console.log(this.state.timesClicked); */\n  }\n\n  const handleScore = (id) => {\n    characters.forEach((element) => {\n      if (id === element.id && element.clicked === false) {\n        element.clicked = true\n        setClicked(false)\n        handleIncrement()\n        console.log(characters) // solo para checquear que se ponga en en true.\n      } else if (id === element.id && element.clicked === true) {\n        if (currentScore > highScore) {\n          setHighScore(currentScore)\n        }\n\n        setCurrentScore(0)\n        setClicked(true)\n        characters.forEach((element) => (element.clicked = false))\n        console.log(characters) // para chequear que todo esten reseteados a false.\n      }\n    })\n  }\n\n  const shuffleArray = () => {\n    // Shuffle array of objects\n    const shuffledArr = shuffle(characters)\n    // Setting 'shuffledArr' as the new state\n    setCharacters(shuffledArr)\n  }\n\n  // handleIncrement increments this.state.currentScore by 1\n  const handleIncrement = () => {\n    // Using setState method to update component's state\n    setCurrentScore(currentScore + 1)\n  }\n\n  // Function that takes an array as a parameter and shuffles it\n  const shuffle = (array) => {\n    // let currentIndex = array.length\n    // let randomIndex\n    // let temporaryValue\n\n    // while (--currentIndex > 0) {\n    //   randomIndex = Math.floor(Math.random() * (currentIndex + 1))\n    //   temporaryValue = array[randomIndex]\n    //   array[randomIndex] = array[currentIndex]\n    //   array[currentIndex] = temporaryValue\n    // }\n    // return array\n\n    for (let j, i = array.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1)) // random index from 0 to i\n      const t = array[i]\n      array[i] = array[j]\n      array[j] = t\n      // [array[i] array[j]] = [array[j], array[i]];\n    }\n\n    return array\n  }\n\n  return (\n    <Wrapper\n      style={{\n        backgroundImage: `url(\"https://images7.alphacoders.com/677/thumb-1920-677266.png\")`,\n      }}\n    >\n      <Navbar currentScore={currentScore} highScore={highScore} />\n      <Jumbotron />\n\n      {characters.map((character) => (\n        <CharacterCard\n          Clicked={clicked}\n          handleClick={handleClick}\n          id={character.id}\n          key={character.id}\n          name={character.name}\n          image={character.image}\n          occupation={character.occupation}\n        />\n      ))}\n    </Wrapper>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}